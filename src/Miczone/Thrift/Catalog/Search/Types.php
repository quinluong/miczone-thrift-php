<?php
namespace Miczone\Thrift\Catalog\Search;

/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


final class SearchProductSortByEnum {
  const FEATURED = 0;
  const NEWEST_ARRIVALS = 1;
  const PRICE_ASC = 2;
  const PRICE_DESC = 3;
  const RATING_STAR_ASC = 4;
  const RATING_STAR_DESC = 5;
  const TOTAL_REVIEW_ASC = 6;
  const TOTAL_REVIEW_DESC = 7;
  static public $__names = array(
    0 => 'FEATURED',
    1 => 'NEWEST_ARRIVALS',
    2 => 'PRICE_ASC',
    3 => 'PRICE_DESC',
    4 => 'RATING_STAR_ASC',
    5 => 'RATING_STAR_DESC',
    6 => 'TOTAL_REVIEW_ASC',
    7 => 'TOTAL_REVIEW_DESC',
  );
}

class SearchProductRequestFilterGroupItem {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $name = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
    }
  }

  public function getName() {
    return 'SearchProductRequestFilterGroupItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchProductRequestFilterGroupItem');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchProductRequestFilterGroup {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var \Miczone\Thrift\Catalog\Search\SearchProductRequestFilterGroupItem[]
   */
  public $itemList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'itemList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Miczone\Thrift\Catalog\Search\SearchProductRequestFilterGroupItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['itemList'])) {
        $this->itemList = $vals['itemList'];
      }
    }
  }

  public function getName() {
    return 'SearchProductRequestFilterGroup';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->itemList = array();
            $_size0 = 0;
            $_etype3 = 0;
            $xfer += $input->readListBegin($_etype3, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $elem5 = null;
              $elem5 = new \Miczone\Thrift\Catalog\Search\SearchProductRequestFilterGroupItem();
              $xfer += $elem5->read($input);
              $this->itemList []= $elem5;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchProductRequestFilterGroup');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemList !== null) {
      if (!is_array($this->itemList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('itemList', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->itemList));
        {
          foreach ($this->itemList as $iter6)
          {
            $xfer += $iter6->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchProductRequest {
  static $_TSPEC;

  /**
   * @var string
   */
  public $sortBy = null;
  /**
   * @var int
   */
  public $productCount = 10;
  /**
   * @var int
   */
  public $productPage = 1;
  /**
   * @var bool
   */
  public $hasRefinement = null;
  /**
   * @var string
   */
  public $keyword = null;
  /**
   * @var string[]
   */
  public $categoryIdList = null;
  /**
   * @var double
   */
  public $minPrice = null;
  /**
   * @var double
   */
  public $maxPrice = null;
  /**
   * @var \Miczone\Thrift\Catalog\Search\SearchProductRequestFilterGroup[]
   */
  public $filterGroupList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'sortBy',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'productCount',
          'type' => TType::BYTE,
          ),
        3 => array(
          'var' => 'productPage',
          'type' => TType::I32,
          ),
        4 => array(
          'var' => 'hasRefinement',
          'type' => TType::BOOL,
          ),
        5 => array(
          'var' => 'keyword',
          'type' => TType::STRING,
          ),
        6 => array(
          'var' => 'categoryIdList',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        7 => array(
          'var' => 'minPrice',
          'type' => TType::DOUBLE,
          ),
        8 => array(
          'var' => 'maxPrice',
          'type' => TType::DOUBLE,
          ),
        9 => array(
          'var' => 'filterGroupList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Miczone\Thrift\Catalog\Search\SearchProductRequestFilterGroup',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['sortBy'])) {
        $this->sortBy = $vals['sortBy'];
      }
      if (isset($vals['productCount'])) {
        $this->productCount = $vals['productCount'];
      }
      if (isset($vals['productPage'])) {
        $this->productPage = $vals['productPage'];
      }
      if (isset($vals['hasRefinement'])) {
        $this->hasRefinement = $vals['hasRefinement'];
      }
      if (isset($vals['keyword'])) {
        $this->keyword = $vals['keyword'];
      }
      if (isset($vals['categoryIdList'])) {
        $this->categoryIdList = $vals['categoryIdList'];
      }
      if (isset($vals['minPrice'])) {
        $this->minPrice = $vals['minPrice'];
      }
      if (isset($vals['maxPrice'])) {
        $this->maxPrice = $vals['maxPrice'];
      }
      if (isset($vals['filterGroupList'])) {
        $this->filterGroupList = $vals['filterGroupList'];
      }
    }
  }

  public function getName() {
    return 'SearchProductRequest';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sortBy);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->productCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->productPage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasRefinement);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->keyword);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::LST) {
            $this->categoryIdList = array();
            $_size7 = 0;
            $_etype10 = 0;
            $xfer += $input->readListBegin($_etype10, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $elem12 = null;
              $xfer += $input->readString($elem12);
              $this->categoryIdList []= $elem12;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->minPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::DOUBLE) {
            $xfer += $input->readDouble($this->maxPrice);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::LST) {
            $this->filterGroupList = array();
            $_size13 = 0;
            $_etype16 = 0;
            $xfer += $input->readListBegin($_etype16, $_size13);
            for ($_i17 = 0; $_i17 < $_size13; ++$_i17)
            {
              $elem18 = null;
              $elem18 = new \Miczone\Thrift\Catalog\Search\SearchProductRequestFilterGroup();
              $xfer += $elem18->read($input);
              $this->filterGroupList []= $elem18;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchProductRequest');
    if ($this->sortBy !== null) {
      $xfer += $output->writeFieldBegin('sortBy', TType::STRING, 1);
      $xfer += $output->writeString($this->sortBy);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productCount !== null) {
      $xfer += $output->writeFieldBegin('productCount', TType::BYTE, 2);
      $xfer += $output->writeByte($this->productCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productPage !== null) {
      $xfer += $output->writeFieldBegin('productPage', TType::I32, 3);
      $xfer += $output->writeI32($this->productPage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasRefinement !== null) {
      $xfer += $output->writeFieldBegin('hasRefinement', TType::BOOL, 4);
      $xfer += $output->writeBool($this->hasRefinement);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->keyword !== null) {
      $xfer += $output->writeFieldBegin('keyword', TType::STRING, 5);
      $xfer += $output->writeString($this->keyword);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->categoryIdList !== null) {
      if (!is_array($this->categoryIdList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('categoryIdList', TType::LST, 6);
      {
        $output->writeListBegin(TType::STRING, count($this->categoryIdList));
        {
          foreach ($this->categoryIdList as $iter19)
          {
            $xfer += $output->writeString($iter19);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->minPrice !== null) {
      $xfer += $output->writeFieldBegin('minPrice', TType::DOUBLE, 7);
      $xfer += $output->writeDouble($this->minPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->maxPrice !== null) {
      $xfer += $output->writeFieldBegin('maxPrice', TType::DOUBLE, 8);
      $xfer += $output->writeDouble($this->maxPrice);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->filterGroupList !== null) {
      if (!is_array($this->filterGroupList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('filterGroupList', TType::LST, 9);
      {
        $output->writeListBegin(TType::STRUCT, count($this->filterGroupList));
        {
          foreach ($this->filterGroupList as $iter20)
          {
            $xfer += $iter20->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchProductResponseDataRefinementCategoryGroupItem {
  static $_TSPEC;

  /**
   * @var string
   */
  public $id = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $slug = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'slug',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['slug'])) {
        $this->slug = $vals['slug'];
      }
    }
  }

  public function getName() {
    return 'SearchProductResponseDataRefinementCategoryGroupItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->slug);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchProductResponseDataRefinementCategoryGroupItem');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 1);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->slug !== null) {
      $xfer += $output->writeFieldBegin('slug', TType::STRING, 3);
      $xfer += $output->writeString($this->slug);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchProductResponseDataRefinementCategoryGroup {
  static $_TSPEC;

  /**
   * @var \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem
   */
  public $parentItem = null;
  /**
   * @var \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem
   */
  public $currentItem = null;
  /**
   * @var \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem[]
   */
  public $sameLevelItemList = null;
  /**
   * @var \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem[]
   */
  public $childItemList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'parentItem',
          'type' => TType::STRUCT,
          'class' => '\Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem',
          ),
        2 => array(
          'var' => 'currentItem',
          'type' => TType::STRUCT,
          'class' => '\Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem',
          ),
        3 => array(
          'var' => 'sameLevelItemList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem',
            ),
          ),
        4 => array(
          'var' => 'childItemList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['parentItem'])) {
        $this->parentItem = $vals['parentItem'];
      }
      if (isset($vals['currentItem'])) {
        $this->currentItem = $vals['currentItem'];
      }
      if (isset($vals['sameLevelItemList'])) {
        $this->sameLevelItemList = $vals['sameLevelItemList'];
      }
      if (isset($vals['childItemList'])) {
        $this->childItemList = $vals['childItemList'];
      }
    }
  }

  public function getName() {
    return 'SearchProductResponseDataRefinementCategoryGroup';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->parentItem = new \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem();
            $xfer += $this->parentItem->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->currentItem = new \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem();
            $xfer += $this->currentItem->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::LST) {
            $this->sameLevelItemList = array();
            $_size21 = 0;
            $_etype24 = 0;
            $xfer += $input->readListBegin($_etype24, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $elem26 = null;
              $elem26 = new \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem();
              $xfer += $elem26->read($input);
              $this->sameLevelItemList []= $elem26;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->childItemList = array();
            $_size27 = 0;
            $_etype30 = 0;
            $xfer += $input->readListBegin($_etype30, $_size27);
            for ($_i31 = 0; $_i31 < $_size27; ++$_i31)
            {
              $elem32 = null;
              $elem32 = new \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem();
              $xfer += $elem32->read($input);
              $this->childItemList []= $elem32;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchProductResponseDataRefinementCategoryGroup');
    if ($this->parentItem !== null) {
      if (!is_object($this->parentItem)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('parentItem', TType::STRUCT, 1);
      $xfer += $this->parentItem->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->currentItem !== null) {
      if (!is_object($this->currentItem)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('currentItem', TType::STRUCT, 2);
      $xfer += $this->currentItem->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sameLevelItemList !== null) {
      if (!is_array($this->sameLevelItemList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('sameLevelItemList', TType::LST, 3);
      {
        $output->writeListBegin(TType::STRUCT, count($this->sameLevelItemList));
        {
          foreach ($this->sameLevelItemList as $iter33)
          {
            $xfer += $iter33->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->childItemList !== null) {
      if (!is_array($this->childItemList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('childItemList', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->childItemList));
        {
          foreach ($this->childItemList as $iter34)
          {
            $xfer += $iter34->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchProductResponseDataRefinementOtherGroupItem {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $totalProduct = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'totalProduct',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['totalProduct'])) {
        $this->totalProduct = $vals['totalProduct'];
      }
    }
  }

  public function getName() {
    return 'SearchProductResponseDataRefinementOtherGroupItem';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalProduct);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchProductResponseDataRefinementOtherGroupItem');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalProduct !== null) {
      $xfer += $output->writeFieldBegin('totalProduct', TType::I64, 3);
      $xfer += $output->writeI64($this->totalProduct);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchProductResponseDataRefinementOtherGroup {
  static $_TSPEC;

  /**
   * @var string
   */
  public $key = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var int
   */
  public $totalProduct = null;
  /**
   * @var \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementOtherGroupItem[]
   */
  public $itemList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'totalProduct',
          'type' => TType::I64,
          ),
        4 => array(
          'var' => 'itemList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementOtherGroupItem',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['key'])) {
        $this->key = $vals['key'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['totalProduct'])) {
        $this->totalProduct = $vals['totalProduct'];
      }
      if (isset($vals['itemList'])) {
        $this->itemList = $vals['itemList'];
      }
    }
  }

  public function getName() {
    return 'SearchProductResponseDataRefinementOtherGroup';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->key);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalProduct);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::LST) {
            $this->itemList = array();
            $_size35 = 0;
            $_etype38 = 0;
            $xfer += $input->readListBegin($_etype38, $_size35);
            for ($_i39 = 0; $_i39 < $_size35; ++$_i39)
            {
              $elem40 = null;
              $elem40 = new \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementOtherGroupItem();
              $xfer += $elem40->read($input);
              $this->itemList []= $elem40;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchProductResponseDataRefinementOtherGroup');
    if ($this->key !== null) {
      $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
      $xfer += $output->writeString($this->key);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalProduct !== null) {
      $xfer += $output->writeFieldBegin('totalProduct', TType::I64, 3);
      $xfer += $output->writeI64($this->totalProduct);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->itemList !== null) {
      if (!is_array($this->itemList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('itemList', TType::LST, 4);
      {
        $output->writeListBegin(TType::STRUCT, count($this->itemList));
        {
          foreach ($this->itemList as $iter41)
          {
            $xfer += $iter41->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchProductResponseDataRefinement {
  static $_TSPEC;

  /**
   * @var \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroup
   */
  public $categoryGroup = null;
  /**
   * @var \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementOtherGroup[]
   */
  public $otherGroupList = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'categoryGroup',
          'type' => TType::STRUCT,
          'class' => '\Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroup',
          ),
        2 => array(
          'var' => 'otherGroupList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementOtherGroup',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['categoryGroup'])) {
        $this->categoryGroup = $vals['categoryGroup'];
      }
      if (isset($vals['otherGroupList'])) {
        $this->otherGroupList = $vals['otherGroupList'];
      }
    }
  }

  public function getName() {
    return 'SearchProductResponseDataRefinement';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->categoryGroup = new \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroup();
            $xfer += $this->categoryGroup->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->otherGroupList = array();
            $_size42 = 0;
            $_etype45 = 0;
            $xfer += $input->readListBegin($_etype45, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $elem47 = null;
              $elem47 = new \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementOtherGroup();
              $xfer += $elem47->read($input);
              $this->otherGroupList []= $elem47;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchProductResponseDataRefinement');
    if ($this->categoryGroup !== null) {
      if (!is_object($this->categoryGroup)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('categoryGroup', TType::STRUCT, 1);
      $xfer += $this->categoryGroup->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->otherGroupList !== null) {
      if (!is_array($this->otherGroupList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('otherGroupList', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRUCT, count($this->otherGroupList));
        {
          foreach ($this->otherGroupList as $iter48)
          {
            $xfer += $iter48->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchProductResponseData {
  static $_TSPEC;

  /**
   * @var int
   */
  public $totalProduct = null;
  /**
   * @var int
   */
  public $totalPage = null;
  /**
   * @var int
   */
  public $productCount = null;
  /**
   * @var int
   */
  public $productPage = null;
  /**
   * @var \Miczone\Thrift\Catalog\Search\Product[]
   */
  public $productList = null;
  /**
   * @var \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinement
   */
  public $refinement = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'totalProduct',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'totalPage',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'productCount',
          'type' => TType::BYTE,
          ),
        4 => array(
          'var' => 'productPage',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'productList',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => '\Miczone\Thrift\Catalog\Search\Product',
            ),
          ),
        6 => array(
          'var' => 'refinement',
          'type' => TType::STRUCT,
          'class' => '\Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinement',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['totalProduct'])) {
        $this->totalProduct = $vals['totalProduct'];
      }
      if (isset($vals['totalPage'])) {
        $this->totalPage = $vals['totalPage'];
      }
      if (isset($vals['productCount'])) {
        $this->productCount = $vals['productCount'];
      }
      if (isset($vals['productPage'])) {
        $this->productPage = $vals['productPage'];
      }
      if (isset($vals['productList'])) {
        $this->productList = $vals['productList'];
      }
      if (isset($vals['refinement'])) {
        $this->refinement = $vals['refinement'];
      }
    }
  }

  public function getName() {
    return 'SearchProductResponseData';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalProduct);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->totalPage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BYTE) {
            $xfer += $input->readByte($this->productCount);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->productPage);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::LST) {
            $this->productList = array();
            $_size49 = 0;
            $_etype52 = 0;
            $xfer += $input->readListBegin($_etype52, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $elem54 = null;
              $elem54 = new \Miczone\Thrift\Catalog\Search\Product();
              $xfer += $elem54->read($input);
              $this->productList []= $elem54;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->refinement = new \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinement();
            $xfer += $this->refinement->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchProductResponseData');
    if ($this->totalProduct !== null) {
      $xfer += $output->writeFieldBegin('totalProduct', TType::I64, 1);
      $xfer += $output->writeI64($this->totalProduct);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->totalPage !== null) {
      $xfer += $output->writeFieldBegin('totalPage', TType::I64, 2);
      $xfer += $output->writeI64($this->totalPage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productCount !== null) {
      $xfer += $output->writeFieldBegin('productCount', TType::BYTE, 3);
      $xfer += $output->writeByte($this->productCount);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productPage !== null) {
      $xfer += $output->writeFieldBegin('productPage', TType::I32, 4);
      $xfer += $output->writeI32($this->productPage);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->productList !== null) {
      if (!is_array($this->productList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('productList', TType::LST, 5);
      {
        $output->writeListBegin(TType::STRUCT, count($this->productList));
        {
          foreach ($this->productList as $iter55)
          {
            $xfer += $iter55->write($output);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->refinement !== null) {
      if (!is_object($this->refinement)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('refinement', TType::STRUCT, 6);
      $xfer += $this->refinement->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class SearchProductResponse {
  static $_TSPEC;

  /**
   * @var \Miczone\Thrift\Common\Error
   */
  public $error = null;
  /**
   * @var \Miczone\Thrift\Catalog\Search\SearchProductResponseData
   */
  public $data = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'error',
          'type' => TType::STRUCT,
          'class' => '\Miczone\Thrift\Common\Error',
          ),
        2 => array(
          'var' => 'data',
          'type' => TType::STRUCT,
          'class' => '\Miczone\Thrift\Catalog\Search\SearchProductResponseData',
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['error'])) {
        $this->error = $vals['error'];
      }
      if (isset($vals['data'])) {
        $this->data = $vals['data'];
      }
    }
  }

  public function getName() {
    return 'SearchProductResponse';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRUCT) {
            $this->error = new \Miczone\Thrift\Common\Error();
            $xfer += $this->error->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRUCT) {
            $this->data = new \Miczone\Thrift\Catalog\Search\SearchProductResponseData();
            $xfer += $this->data->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('SearchProductResponse');
    if ($this->error !== null) {
      if (!is_object($this->error)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('error', TType::STRUCT, 1);
      $xfer += $this->error->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->data !== null) {
      if (!is_object($this->data)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('data', TType::STRUCT, 2);
      $xfer += $this->data->write($output);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class Product {
  static $_TSPEC;

  /**
   * @var int
   */
  public $createdAt = null;
  /**
   * @var int
   */
  public $updatedAt = null;
  /**
   * @var bool
   */
  public $isActive = null;
  /**
   * @var string
   */
  public $id = null;
  /**
   * @var \Miczone\Thrift\Catalog\Source\SimpleSource
   */
  public $source = null;
  /**
   * @var \Miczone\Thrift\Catalog\OriginalMerchant\SimpleOriginalMerchant
   */
  public $originalMerchant = null;
  /**
   * @var string
   */
  public $sku = null;
  /**
   * @var string
   */
  public $name = null;
  /**
   * @var string
   */
  public $avatar = null;
  /**
   * @var string[]
   */
  public $imageList = null;
  /**
   * @var bool
   */
  public $hasFastShipping = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'createdAt',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'updatedAt',
          'type' => TType::I64,
          ),
        3 => array(
          'var' => 'isActive',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'id',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'source',
          'type' => TType::STRUCT,
          'class' => '\Miczone\Thrift\Catalog\Source\SimpleSource',
          ),
        6 => array(
          'var' => 'originalMerchant',
          'type' => TType::STRUCT,
          'class' => '\Miczone\Thrift\Catalog\OriginalMerchant\SimpleOriginalMerchant',
          ),
        7 => array(
          'var' => 'sku',
          'type' => TType::STRING,
          ),
        8 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'avatar',
          'type' => TType::STRING,
          ),
        10 => array(
          'var' => 'imageList',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        11 => array(
          'var' => 'hasFastShipping',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['createdAt'])) {
        $this->createdAt = $vals['createdAt'];
      }
      if (isset($vals['updatedAt'])) {
        $this->updatedAt = $vals['updatedAt'];
      }
      if (isset($vals['isActive'])) {
        $this->isActive = $vals['isActive'];
      }
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['source'])) {
        $this->source = $vals['source'];
      }
      if (isset($vals['originalMerchant'])) {
        $this->originalMerchant = $vals['originalMerchant'];
      }
      if (isset($vals['sku'])) {
        $this->sku = $vals['sku'];
      }
      if (isset($vals['name'])) {
        $this->name = $vals['name'];
      }
      if (isset($vals['avatar'])) {
        $this->avatar = $vals['avatar'];
      }
      if (isset($vals['imageList'])) {
        $this->imageList = $vals['imageList'];
      }
      if (isset($vals['hasFastShipping'])) {
        $this->hasFastShipping = $vals['hasFastShipping'];
      }
    }
  }

  public function getName() {
    return 'Product';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->createdAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::I64) {
            $xfer += $input->readI64($this->updatedAt);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->isActive);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::STRUCT) {
            $this->source = new \Miczone\Thrift\Catalog\Source\SimpleSource();
            $xfer += $this->source->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::STRUCT) {
            $this->originalMerchant = new \Miczone\Thrift\Catalog\OriginalMerchant\SimpleOriginalMerchant();
            $xfer += $this->originalMerchant->read($input);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->sku);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->name);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->avatar);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 10:
          if ($ftype == TType::LST) {
            $this->imageList = array();
            $_size56 = 0;
            $_etype59 = 0;
            $xfer += $input->readListBegin($_etype59, $_size56);
            for ($_i60 = 0; $_i60 < $_size56; ++$_i60)
            {
              $elem61 = null;
              $xfer += $input->readString($elem61);
              $this->imageList []= $elem61;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 11:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->hasFastShipping);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Product');
    if ($this->createdAt !== null) {
      $xfer += $output->writeFieldBegin('createdAt', TType::I64, 1);
      $xfer += $output->writeI64($this->createdAt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->updatedAt !== null) {
      $xfer += $output->writeFieldBegin('updatedAt', TType::I64, 2);
      $xfer += $output->writeI64($this->updatedAt);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->isActive !== null) {
      $xfer += $output->writeFieldBegin('isActive', TType::BOOL, 3);
      $xfer += $output->writeBool($this->isActive);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::STRING, 4);
      $xfer += $output->writeString($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->source !== null) {
      if (!is_object($this->source)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('source', TType::STRUCT, 5);
      $xfer += $this->source->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->originalMerchant !== null) {
      if (!is_object($this->originalMerchant)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('originalMerchant', TType::STRUCT, 6);
      $xfer += $this->originalMerchant->write($output);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->sku !== null) {
      $xfer += $output->writeFieldBegin('sku', TType::STRING, 7);
      $xfer += $output->writeString($this->sku);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->name !== null) {
      $xfer += $output->writeFieldBegin('name', TType::STRING, 8);
      $xfer += $output->writeString($this->name);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->avatar !== null) {
      $xfer += $output->writeFieldBegin('avatar', TType::STRING, 9);
      $xfer += $output->writeString($this->avatar);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->imageList !== null) {
      if (!is_array($this->imageList)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('imageList', TType::LST, 10);
      {
        $output->writeListBegin(TType::STRING, count($this->imageList));
        {
          foreach ($this->imageList as $iter62)
          {
            $xfer += $output->writeString($iter62);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->hasFastShipping !== null) {
      $xfer += $output->writeFieldBegin('hasFastShipping', TType::BOOL, 11);
      $xfer += $output->writeBool($this->hasFastShipping);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}


