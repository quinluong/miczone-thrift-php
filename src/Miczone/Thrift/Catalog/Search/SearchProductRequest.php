<?php
namespace Miczone\Thrift\Catalog\Search;

/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class SearchProductRequest
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'sortBy',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'productCount',
            'isRequired' => false,
            'type' => TType::BYTE,
        ),
        3 => array(
            'var' => 'productPage',
            'isRequired' => false,
            'type' => TType::I32,
        ),
        4 => array(
            'var' => 'hasRefinement',
            'isRequired' => false,
            'type' => TType::BOOL,
        ),
        5 => array(
            'var' => 'keyword',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'categoryIdList',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRING,
            'elem' => array(
                'type' => TType::STRING,
                ),
        ),
        7 => array(
            'var' => 'minPrice',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        8 => array(
            'var' => 'maxPrice',
            'isRequired' => false,
            'type' => TType::DOUBLE,
        ),
        9 => array(
            'var' => 'filterGroupList',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Miczone\Thrift\Catalog\Search\SearchProductRequestFilterGroup',
                ),
        ),
    );

    /**
     * @var string
     */
    public $sortBy = null;
    /**
     * @var int
     */
    public $productCount = 10;
    /**
     * @var int
     */
    public $productPage = 1;
    /**
     * @var bool
     */
    public $hasRefinement = null;
    /**
     * @var string
     */
    public $keyword = null;
    /**
     * @var string[]
     */
    public $categoryIdList = null;
    /**
     * @var double
     */
    public $minPrice = null;
    /**
     * @var double
     */
    public $maxPrice = null;
    /**
     * @var \Miczone\Thrift\Catalog\Search\SearchProductRequestFilterGroup[]
     */
    public $filterGroupList = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['sortBy'])) {
                $this->sortBy = $vals['sortBy'];
            }
            if (isset($vals['productCount'])) {
                $this->productCount = $vals['productCount'];
            }
            if (isset($vals['productPage'])) {
                $this->productPage = $vals['productPage'];
            }
            if (isset($vals['hasRefinement'])) {
                $this->hasRefinement = $vals['hasRefinement'];
            }
            if (isset($vals['keyword'])) {
                $this->keyword = $vals['keyword'];
            }
            if (isset($vals['categoryIdList'])) {
                $this->categoryIdList = $vals['categoryIdList'];
            }
            if (isset($vals['minPrice'])) {
                $this->minPrice = $vals['minPrice'];
            }
            if (isset($vals['maxPrice'])) {
                $this->maxPrice = $vals['maxPrice'];
            }
            if (isset($vals['filterGroupList'])) {
                $this->filterGroupList = $vals['filterGroupList'];
            }
        }
    }

    public function getName()
    {
        return 'SearchProductRequest';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->sortBy);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::BYTE) {
                        $xfer += $input->readByte($this->productCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->productPage);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->hasRefinement);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->keyword);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::LST) {
                        $this->categoryIdList = array();
                        $_size7 = 0;
                        $_etype10 = 0;
                        $xfer += $input->readListBegin($_etype10, $_size7);
                        for ($_i11 = 0; $_i11 < $_size7; ++$_i11) {
                            $elem12 = null;
                            $xfer += $input->readString($elem12);
                            $this->categoryIdList []= $elem12;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->minPrice);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 8:
                    if ($ftype == TType::DOUBLE) {
                        $xfer += $input->readDouble($this->maxPrice);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 9:
                    if ($ftype == TType::LST) {
                        $this->filterGroupList = array();
                        $_size13 = 0;
                        $_etype16 = 0;
                        $xfer += $input->readListBegin($_etype16, $_size13);
                        for ($_i17 = 0; $_i17 < $_size13; ++$_i17) {
                            $elem18 = null;
                            $elem18 = new \Miczone\Thrift\Catalog\Search\SearchProductRequestFilterGroup();
                            $xfer += $elem18->read($input);
                            $this->filterGroupList []= $elem18;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('SearchProductRequest');
        if ($this->sortBy !== null) {
            $xfer += $output->writeFieldBegin('sortBy', TType::STRING, 1);
            $xfer += $output->writeString($this->sortBy);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->productCount !== null) {
            $xfer += $output->writeFieldBegin('productCount', TType::BYTE, 2);
            $xfer += $output->writeByte($this->productCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->productPage !== null) {
            $xfer += $output->writeFieldBegin('productPage', TType::I32, 3);
            $xfer += $output->writeI32($this->productPage);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->hasRefinement !== null) {
            $xfer += $output->writeFieldBegin('hasRefinement', TType::BOOL, 4);
            $xfer += $output->writeBool($this->hasRefinement);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->keyword !== null) {
            $xfer += $output->writeFieldBegin('keyword', TType::STRING, 5);
            $xfer += $output->writeString($this->keyword);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->categoryIdList !== null) {
            if (!is_array($this->categoryIdList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('categoryIdList', TType::LST, 6);
            $output->writeListBegin(TType::STRING, count($this->categoryIdList));
            foreach ($this->categoryIdList as $iter19) {
                $xfer += $output->writeString($iter19);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->minPrice !== null) {
            $xfer += $output->writeFieldBegin('minPrice', TType::DOUBLE, 7);
            $xfer += $output->writeDouble($this->minPrice);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->maxPrice !== null) {
            $xfer += $output->writeFieldBegin('maxPrice', TType::DOUBLE, 8);
            $xfer += $output->writeDouble($this->maxPrice);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->filterGroupList !== null) {
            if (!is_array($this->filterGroupList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('filterGroupList', TType::LST, 9);
            $output->writeListBegin(TType::STRUCT, count($this->filterGroupList));
            foreach ($this->filterGroupList as $iter20) {
                $xfer += $iter20->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
