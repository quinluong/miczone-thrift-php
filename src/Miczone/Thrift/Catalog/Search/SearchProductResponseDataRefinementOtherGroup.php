<?php
namespace Miczone\Thrift\Catalog\Search;

/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class SearchProductResponseDataRefinementOtherGroup
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'key',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        2 => array(
            'var' => 'name',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'totalProduct',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        4 => array(
            'var' => 'itemList',
            'isRequired' => true,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementOtherGroupItem',
                ),
        ),
    );

    /**
     * @var string
     */
    public $key = null;
    /**
     * @var string
     */
    public $name = null;
    /**
     * @var int
     */
    public $totalProduct = null;
    /**
     * @var \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementOtherGroupItem[]
     */
    public $itemList = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['key'])) {
                $this->key = $vals['key'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['totalProduct'])) {
                $this->totalProduct = $vals['totalProduct'];
            }
            if (isset($vals['itemList'])) {
                $this->itemList = $vals['itemList'];
            }
        }
    }

    public function getName()
    {
        return 'SearchProductResponseDataRefinementOtherGroup';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->key);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->totalProduct);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->itemList = array();
                        $_size35 = 0;
                        $_etype38 = 0;
                        $xfer += $input->readListBegin($_etype38, $_size35);
                        for ($_i39 = 0; $_i39 < $_size35; ++$_i39) {
                            $elem40 = null;
                            $elem40 = new \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementOtherGroupItem();
                            $xfer += $elem40->read($input);
                            $this->itemList []= $elem40;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('SearchProductResponseDataRefinementOtherGroup');
        if ($this->key !== null) {
            $xfer += $output->writeFieldBegin('key', TType::STRING, 1);
            $xfer += $output->writeString($this->key);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 2);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->totalProduct !== null) {
            $xfer += $output->writeFieldBegin('totalProduct', TType::I64, 3);
            $xfer += $output->writeI64($this->totalProduct);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->itemList !== null) {
            if (!is_array($this->itemList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('itemList', TType::LST, 4);
            $output->writeListBegin(TType::STRUCT, count($this->itemList));
            foreach ($this->itemList as $iter41) {
                $xfer += $iter41->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
