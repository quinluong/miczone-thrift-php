<?php
namespace Miczone\Thrift\Catalog\Search;

/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class SearchProductResponseDataRefinementCategoryGroup
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'parentItem',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem',
        ),
        2 => array(
            'var' => 'currentItem',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem',
        ),
        3 => array(
            'var' => 'sameLevelItemList',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem',
                ),
        ),
        4 => array(
            'var' => 'childItemList',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem',
                ),
        ),
    );

    /**
     * @var \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem
     */
    public $parentItem = null;
    /**
     * @var \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem
     */
    public $currentItem = null;
    /**
     * @var \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem[]
     */
    public $sameLevelItemList = null;
    /**
     * @var \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem[]
     */
    public $childItemList = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['parentItem'])) {
                $this->parentItem = $vals['parentItem'];
            }
            if (isset($vals['currentItem'])) {
                $this->currentItem = $vals['currentItem'];
            }
            if (isset($vals['sameLevelItemList'])) {
                $this->sameLevelItemList = $vals['sameLevelItemList'];
            }
            if (isset($vals['childItemList'])) {
                $this->childItemList = $vals['childItemList'];
            }
        }
    }

    public function getName()
    {
        return 'SearchProductResponseDataRefinementCategoryGroup';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::STRUCT) {
                        $this->parentItem = new \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem();
                        $xfer += $this->parentItem->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRUCT) {
                        $this->currentItem = new \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem();
                        $xfer += $this->currentItem->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::LST) {
                        $this->sameLevelItemList = array();
                        $_size21 = 0;
                        $_etype24 = 0;
                        $xfer += $input->readListBegin($_etype24, $_size21);
                        for ($_i25 = 0; $_i25 < $_size21; ++$_i25) {
                            $elem26 = null;
                            $elem26 = new \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem();
                            $xfer += $elem26->read($input);
                            $this->sameLevelItemList []= $elem26;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::LST) {
                        $this->childItemList = array();
                        $_size27 = 0;
                        $_etype30 = 0;
                        $xfer += $input->readListBegin($_etype30, $_size27);
                        for ($_i31 = 0; $_i31 < $_size27; ++$_i31) {
                            $elem32 = null;
                            $elem32 = new \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinementCategoryGroupItem();
                            $xfer += $elem32->read($input);
                            $this->childItemList []= $elem32;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('SearchProductResponseDataRefinementCategoryGroup');
        if ($this->parentItem !== null) {
            if (!is_object($this->parentItem)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('parentItem', TType::STRUCT, 1);
            $xfer += $this->parentItem->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->currentItem !== null) {
            if (!is_object($this->currentItem)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('currentItem', TType::STRUCT, 2);
            $xfer += $this->currentItem->write($output);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->sameLevelItemList !== null) {
            if (!is_array($this->sameLevelItemList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('sameLevelItemList', TType::LST, 3);
            $output->writeListBegin(TType::STRUCT, count($this->sameLevelItemList));
            foreach ($this->sameLevelItemList as $iter33) {
                $xfer += $iter33->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->childItemList !== null) {
            if (!is_array($this->childItemList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('childItemList', TType::LST, 4);
            $output->writeListBegin(TType::STRUCT, count($this->childItemList));
            foreach ($this->childItemList as $iter34) {
                $xfer += $iter34->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
