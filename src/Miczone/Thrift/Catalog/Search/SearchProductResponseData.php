<?php
namespace Miczone\Thrift\Catalog\Search;

/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class SearchProductResponseData
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'totalProduct',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        2 => array(
            'var' => 'totalPage',
            'isRequired' => false,
            'type' => TType::I64,
        ),
        3 => array(
            'var' => 'productCount',
            'isRequired' => true,
            'type' => TType::BYTE,
        ),
        4 => array(
            'var' => 'productPage',
            'isRequired' => true,
            'type' => TType::I32,
        ),
        5 => array(
            'var' => 'productList',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Miczone\Thrift\Catalog\Search\Product',
                ),
        ),
        6 => array(
            'var' => 'refinement',
            'isRequired' => false,
            'type' => TType::STRUCT,
            'class' => '\Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinement',
        ),
    );

    /**
     * @var int
     */
    public $totalProduct = null;
    /**
     * @var int
     */
    public $totalPage = null;
    /**
     * @var int
     */
    public $productCount = null;
    /**
     * @var int
     */
    public $productPage = null;
    /**
     * @var \Miczone\Thrift\Catalog\Search\Product[]
     */
    public $productList = null;
    /**
     * @var \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinement
     */
    public $refinement = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['totalProduct'])) {
                $this->totalProduct = $vals['totalProduct'];
            }
            if (isset($vals['totalPage'])) {
                $this->totalPage = $vals['totalPage'];
            }
            if (isset($vals['productCount'])) {
                $this->productCount = $vals['productCount'];
            }
            if (isset($vals['productPage'])) {
                $this->productPage = $vals['productPage'];
            }
            if (isset($vals['productList'])) {
                $this->productList = $vals['productList'];
            }
            if (isset($vals['refinement'])) {
                $this->refinement = $vals['refinement'];
            }
        }
    }

    public function getName()
    {
        return 'SearchProductResponseData';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->totalProduct);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::I64) {
                        $xfer += $input->readI64($this->totalPage);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::BYTE) {
                        $xfer += $input->readByte($this->productCount);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::I32) {
                        $xfer += $input->readI32($this->productPage);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::LST) {
                        $this->productList = array();
                        $_size49 = 0;
                        $_etype52 = 0;
                        $xfer += $input->readListBegin($_etype52, $_size49);
                        for ($_i53 = 0; $_i53 < $_size49; ++$_i53) {
                            $elem54 = null;
                            $elem54 = new \Miczone\Thrift\Catalog\Search\Product();
                            $xfer += $elem54->read($input);
                            $this->productList []= $elem54;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRUCT) {
                        $this->refinement = new \Miczone\Thrift\Catalog\Search\SearchProductResponseDataRefinement();
                        $xfer += $this->refinement->read($input);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('SearchProductResponseData');
        if ($this->totalProduct !== null) {
            $xfer += $output->writeFieldBegin('totalProduct', TType::I64, 1);
            $xfer += $output->writeI64($this->totalProduct);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->totalPage !== null) {
            $xfer += $output->writeFieldBegin('totalPage', TType::I64, 2);
            $xfer += $output->writeI64($this->totalPage);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->productCount !== null) {
            $xfer += $output->writeFieldBegin('productCount', TType::BYTE, 3);
            $xfer += $output->writeByte($this->productCount);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->productPage !== null) {
            $xfer += $output->writeFieldBegin('productPage', TType::I32, 4);
            $xfer += $output->writeI32($this->productPage);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->productList !== null) {
            if (!is_array($this->productList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('productList', TType::LST, 5);
            $output->writeListBegin(TType::STRUCT, count($this->productList));
            foreach ($this->productList as $iter55) {
                $xfer += $iter55->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        if ($this->refinement !== null) {
            if (!is_object($this->refinement)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('refinement', TType::STRUCT, 6);
            $xfer += $this->refinement->write($output);
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
