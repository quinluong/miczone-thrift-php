<?php
namespace Miczone\Thrift\Catalog\Category;

/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;

class GetSliceCategoryResponseDataItem
{
    static public $isValidate = false;

    static public $_TSPEC = array(
        1 => array(
            'var' => 'isActive',
            'isRequired' => true,
            'type' => TType::BOOL,
        ),
        2 => array(
            'var' => 'id',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        3 => array(
            'var' => 'parentId',
            'isRequired' => false,
            'type' => TType::STRING,
        ),
        4 => array(
            'var' => 'level',
            'isRequired' => true,
            'type' => TType::BYTE,
        ),
        5 => array(
            'var' => 'name',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        6 => array(
            'var' => 'slug',
            'isRequired' => true,
            'type' => TType::STRING,
        ),
        7 => array(
            'var' => 'originalCategoryList',
            'isRequired' => false,
            'type' => TType::LST,
            'etype' => TType::STRUCT,
            'elem' => array(
                'type' => TType::STRUCT,
                'class' => '\Miczone\Thrift\Catalog\Category\GetSliceCategoryResponseDataItemOriginalCategory',
                ),
        ),
    );

    /**
     * @var bool
     */
    public $isActive = null;
    /**
     * @var string
     */
    public $id = null;
    /**
     * @var string
     */
    public $parentId = null;
    /**
     * @var int
     */
    public $level = null;
    /**
     * @var string
     */
    public $name = null;
    /**
     * @var string
     */
    public $slug = null;
    /**
     * @var \Miczone\Thrift\Catalog\Category\GetSliceCategoryResponseDataItemOriginalCategory[]
     */
    public $originalCategoryList = null;

    public function __construct($vals = null)
    {
        if (is_array($vals)) {
            if (isset($vals['isActive'])) {
                $this->isActive = $vals['isActive'];
            }
            if (isset($vals['id'])) {
                $this->id = $vals['id'];
            }
            if (isset($vals['parentId'])) {
                $this->parentId = $vals['parentId'];
            }
            if (isset($vals['level'])) {
                $this->level = $vals['level'];
            }
            if (isset($vals['name'])) {
                $this->name = $vals['name'];
            }
            if (isset($vals['slug'])) {
                $this->slug = $vals['slug'];
            }
            if (isset($vals['originalCategoryList'])) {
                $this->originalCategoryList = $vals['originalCategoryList'];
            }
        }
    }

    public function getName()
    {
        return 'GetSliceCategoryResponseDataItem';
    }


    public function read($input)
    {
        $xfer = 0;
        $fname = null;
        $ftype = 0;
        $fid = 0;
        $xfer += $input->readStructBegin($fname);
        while (true) {
            $xfer += $input->readFieldBegin($fname, $ftype, $fid);
            if ($ftype == TType::STOP) {
                break;
            }
            switch ($fid) {
                case 1:
                    if ($ftype == TType::BOOL) {
                        $xfer += $input->readBool($this->isActive);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 2:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->id);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 3:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->parentId);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 4:
                    if ($ftype == TType::BYTE) {
                        $xfer += $input->readByte($this->level);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 5:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->name);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 6:
                    if ($ftype == TType::STRING) {
                        $xfer += $input->readString($this->slug);
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                case 7:
                    if ($ftype == TType::LST) {
                        $this->originalCategoryList = array();
                        $_size53 = 0;
                        $_etype56 = 0;
                        $xfer += $input->readListBegin($_etype56, $_size53);
                        for ($_i57 = 0; $_i57 < $_size53; ++$_i57) {
                            $elem58 = null;
                            $elem58 = new \Miczone\Thrift\Catalog\Category\GetSliceCategoryResponseDataItemOriginalCategory();
                            $xfer += $elem58->read($input);
                            $this->originalCategoryList []= $elem58;
                        }
                        $xfer += $input->readListEnd();
                    } else {
                        $xfer += $input->skip($ftype);
                    }
                    break;
                default:
                    $xfer += $input->skip($ftype);
                    break;
            }
            $xfer += $input->readFieldEnd();
        }
        $xfer += $input->readStructEnd();
        return $xfer;
    }

    public function write($output)
    {
        $xfer = 0;
        $xfer += $output->writeStructBegin('GetSliceCategoryResponseDataItem');
        if ($this->isActive !== null) {
            $xfer += $output->writeFieldBegin('isActive', TType::BOOL, 1);
            $xfer += $output->writeBool($this->isActive);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->id !== null) {
            $xfer += $output->writeFieldBegin('id', TType::STRING, 2);
            $xfer += $output->writeString($this->id);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->parentId !== null) {
            $xfer += $output->writeFieldBegin('parentId', TType::STRING, 3);
            $xfer += $output->writeString($this->parentId);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->level !== null) {
            $xfer += $output->writeFieldBegin('level', TType::BYTE, 4);
            $xfer += $output->writeByte($this->level);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->name !== null) {
            $xfer += $output->writeFieldBegin('name', TType::STRING, 5);
            $xfer += $output->writeString($this->name);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->slug !== null) {
            $xfer += $output->writeFieldBegin('slug', TType::STRING, 6);
            $xfer += $output->writeString($this->slug);
            $xfer += $output->writeFieldEnd();
        }
        if ($this->originalCategoryList !== null) {
            if (!is_array($this->originalCategoryList)) {
                throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
            }
            $xfer += $output->writeFieldBegin('originalCategoryList', TType::LST, 7);
            $output->writeListBegin(TType::STRUCT, count($this->originalCategoryList));
            foreach ($this->originalCategoryList as $iter59) {
                $xfer += $iter59->write($output);
            }
            $output->writeListEnd();
            $xfer += $output->writeFieldEnd();
        }
        $xfer += $output->writeFieldStop();
        $xfer += $output->writeStructEnd();
        return $xfer;
    }
}
